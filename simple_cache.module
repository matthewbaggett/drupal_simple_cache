<?php

// Define our settings if they've not been set before.
if(!defined('SIMPLE_CACHE_CAN_DRUPAL_CACHE'))       define('SIMPLE_CACHE_CAN_DRUPAL_CACHE',       false );
if(!defined('SIMPLE_CACHE_CAN_APC_CACHE'))          define('SIMPLE_CACHE_CAN_APC_CACHE',          true  );
if(!defined('SIMPLE_CACHE_CAN_DATABASE_CACHE'))     define('SIMPLE_CACHE_CAN_DATABASE_CACHE',     true  );
if(!defined('SIMPLE_CACHE_CAN_SESSION_CACHE'))      define('SIMPLE_CACHE_CAN_SESSION_CACHE',      false );
if(!defined('SIMPLE_CACHE_CAN_DISK_CACHE'))         define('SIMPLE_CACHE_CAN_DISK_CACHE',         false );

/**
 * Return the name of the APC bin to use. Prevents collision with other sites.
 *
 * @return string
 */
function simple_cache_bin() {
  return "horizon";
}

function simple_cache_clean(){
  if(SIMPLE_CACHE_CAN_DATABASE_CACHE){
    // Quick cleanup of expired things
    db_delete('cache_simplecache')
      ->condition('cache_expires',date("Y-m-d H:i:s") , "<")
      ->execute();
  }
}

define("SIMPLE_CACHE_MECHANISM_NONE",       "NONE");
define("SIMPLE_CACHE_MECHANISM_DISK",       "DISK");
define("SIMPLE_CACHE_MECHANISM_SESSION",    "SESSION");
define("SIMPLE_CACHE_MECHANISM_DATABASE",   "DATABASE");
define("SIMPLE_CACHE_MECHANISM_APC",        "APC");
define("SIMPLE_CACHE_MECHANISM_DRUPAL_APC", "DRUPAL_APC");

function simple_cache_determine_caching_mechanism(){
  if (SIMPLE_CACHE_CAN_DRUPAL_CACHE && class_exists('DrupalAPCCache')) {
    return SIMPLE_CACHE_MECHANISM_DRUPAL_APC;
  } elseif (SIMPLE_CACHE_CAN_APC_CACHE && function_exists('apc_store')){
    return SIMPLE_CACHE_MECHANISM_APC;
  } elseif (SIMPLE_CACHE_CAN_DATABASE_CACHE){
    return SIMPLE_CACHE_MECHANISM_DATABASE;
  } elseif (SIMPLE_CACHE_CAN_SESSION_CACHE){
    return SIMPLE_CACHE_MECHANISM_SESSION;
  } elseif (SIMPLE_CACHE_CAN_DISK_CACHE){
    return SIMPLE_CACHE_MECHANISM_DISK;
  }else{
    return SIMPLE_CACHE_MECHANISM_NONE;
  }
}

/**
 * Add an item to the cache
 *
 * @param string $key
 * @param mixed $value
 * @param int $expire seconds until expire
 * @return boolean
 */
function simple_cache_put($key, $value, $expire = CACHE_PERMANENT) {
  global $simple_cache_mechanism;
  switch(simple_cache_determine_caching_mechanism()){
    case SIMPLE_CACHE_MECHANISM_NONE:
      $simple_cache_mechanism = 'none';
      return FALSE;
    case SIMPLE_CACHE_MECHANISM_DISK:
      $file = simple_cache_disk_name($key);
      file_put_contents($file, serialize($value));
      chmod($file, 0660);
      $simple_cache_mechanism = 'disk';
      return FALSE;
    case SIMPLE_CACHE_MECHANISM_SESSION:
      $_SESSION['HORIZON_DISK_CACHE_' . $key] = serialize($value);
      $simple_cache_mechanism = 'session';
      return TRUE;
    case SIMPLE_CACHE_MECHANISM_DATABASE:
      if($expire === CACHE_PERMANENT){
        // Ten years should be enough right?
        $expires = time() + (86400 * 365 * 10);
      }else{
        $expires = time() + $expire;
      }
      try{
        $success = db_merge('cache_simplecache')
          ->fields(array(
                        'cache_key'     => $key,
                        'cache_value'   => serialize($value),
                        'cache_created' => date("Y-m-d H:i:s"),
                        'cache_expires' => date("Y-m-d H:i:s", $expires),
                        'expire'       => $expires,
                        'created'       => time(),
                   ))
          ->key(array('cache_key' => $key))
          ->execute();
        if($success){
          return TRUE;
        }else{
          return FALSE;
        }
      }catch(PDOException $e){
        watchdog("PDO", $e->getMessage());
        drupal_set_message($e->getMessage());
        return FALSE;
      }
      return FALSE;
    case SIMPLE_CACHE_MECHANISM_APC:
      apc_store($key, serialize($value));
      $simple_cache_mechanism = 'apc';
      return TRUE;
    case SIMPLE_CACHE_MECHANISM_DRUPAL_APC:
      $cache = simple_cache_get_cache();
      $simple_cache_mechanism = 'drupal';
      return $cache->set($key, $value, $expire);
    default:
      drupal_set_message("Simplecache: No caching strategy.");
      return false;
  }

}

/**
 * Pull an item from the cache. Returns false on failure.
 *
 * @param string $key
 * @return mixed
 */
function simple_cache_get($key) {
  simple_cache_clean();

  if (SIMPLE_CACHE_CAN_DRUPAL_CACHE && class_exists('DrupalAPCCache')) {
    //drupal_set_message('simple_cache_get mode: DrupalAPCCache');
    $cache = simple_cache_get_cache();
    $hit   = $cache->get($key);
    if (is_object($hit)) {
      if (property_exists($hit, 'data')) {
        return $hit->data;
      }
    }
    return FALSE;
  } elseif (SIMPLE_CACHE_CAN_APC_CACHE && function_exists('apc_fetch')){
    //drupal_set_message('simple_cache_get mode: apc_fetch');
    if(apc_exists($key)){
      return unserialize(apc_fetch($key));
    }
    return FALSE;
  } elseif (SIMPLE_CACHE_CAN_DATABASE_CACHE){
    //drupal_set_message('simple_cache_get mode: db');
    try{
        $query = db_select('cache_simplecache','csc');
        $query->fields('csc');
        $query->condition('cache_key', $key);
        $query->condition('cache_expires', date("Y-m-d H:i:s"), '>');
        $responses = $query->execute()->fetchAllAssoc('cid');
        if(count($responses) == 0){
          return FALSE;
        }else{
          $response = (array) end($responses);
          return unserialize($response['cache_value']);
        }
    }catch(PDOException $e){
        watchdog("PDO", $e->getMessage());
        return FALSE;
    }
  } elseif (SIMPLE_CACHE_CAN_SESSION_CACHE){
    //drupal_set_message('simple_cache_get mode: session');
    if(isset($_SESSION['HORIZON_DISK_CACHE_' . $key])){
      return unserialize($_SESSION['HORIZON_DISK_CACHE_' . $key]);
    }
    return FALSE;
  } elseif (SIMPLE_CACHE_CAN_DISK_CACHE) {
    //drupal_set_message('simple_cache_get mode: disk');
    // Attempt to use a file
    $file = simple_cache_disk_name($key);
    if (file_exists($file)) {
      return unserialize(file_get_contents($file));
    }
    return FALSE;
  }else{
    //drupal_set_message('simple_cache_get mode: none');
    return FALSE;
  }
}

/**
 * Expire a cached item
 *
 * @param $key
 * @return bool Weather or not the cached item was expired.
 */
function simple_cache_expire($key) {
  if (SIMPLE_CACHE_CAN_DRUPAL_CACHE && class_exists('DrupalAPCCache')) {
    // Selectively remove the cache item in APC.
    $cache = simple_cache_get_cache();
    $cache->clear($key);
    return TRUE;
  } elseif (SIMPLE_CACHE_CAN_APC_CACHE && function_exists('apc_fetch')){
    if(apc_exists($key)){
      apc_delete($key);
      return TRUE;
    }else{
      return FALSE;
    }
  } elseif (SIMPLE_CACHE_CAN_DATABASE_CACHE){
    $query = db_delete("cache_simplecache");
    $query->condition('cache_key', $key);
    $query->execute();
  } elseif (SIMPLE_CACHE_CAN_SESSION_CACHE){
    if(isset($_SESSION['HORIZON_DISK_CACHE_' . $key])){
      unset($_SESSION['HORIZON_DISK_CACHE_' . $key]);
      return TRUE;
    }
    return FALSE;
  } elseif (SIMPLE_CACHE_CAN_DISK_CACHE) {
    $file = simple_cache_disk_name($key);
    if (file_exists($file)) {
      unlink($file);
      return TRUE;
    }
    return FALSE;
  }else{
    return FALSE;
  }
}

function simple_cache_get_cache() {
  if (!isset($GLOBALS['apc_cache_object']) || !$GLOBALS['apc_cache_object'] instanceof DrupalAPCCache) {
    $GLOBALS['apc_cache_object'] = new DrupalAPCCache(simple_cache_bin());
  }
  return $GLOBALS['apc_cache_object'];
}

/**
 * Generate a file location if we're using on-disk caching
 *
 * @param $key
 * @return string
 */
function simple_cache_disk_name($key) {
  $hash      = hash("sha1", $key);
  $file_name = substr($hash, 0, 2) . "/" . substr($hash, 2, 2) . "/" . substr($hash, 4, 2) . "/" . substr($hash, 6, 2) . "/" . substr($hash, 8) . ".cache";
  $file_path = "/tmp/simple_cache/{$file_name}";
  if (!file_exists(dirname($file_path))) {
    mkdir(dirname($file_path), 0777, true);
  }
  return $file_path;
}

/**
 * Dump dah cache. Get to da choppah.
 */
function simple_cache_flush() {
  apc_clear_cache();
  apc_clear_cache('user');
  if(function_exists('apc_clear_cache')){
    apc_clear_cache();
  }
}

function simple_cache_flush_caches() {
    if(SIMPLE_CACHE_CAN_DATABASE_CACHE){
        return array('cache_simplecache');
    }
    if(function_exists('apc_clear_cache')){
      apc_clear_cache();
    }
    return array();
}